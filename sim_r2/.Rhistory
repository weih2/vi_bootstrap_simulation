install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("TSA")
install.packages("leaps")
install.packages("TSA")
library(TSA)
help(arima.sim)
arima.sim(c(1,0,0), ar = 0.1)
arima.sim(list(c(1,0,0), ar = 0.1), n = 10)
str(arima.sim(list(c(1,0,0), ar = 0.1), n = 10))
)
arima.sim(list(c(1,0,0), ar = 0.1), n = 10)
a = arima.sim(list(c(1,0,0), ar = auto.cor)
)
a = arima.sim(list(c(1,0,0), ar = 0.1))
a = arima.sim(list(c(1,0,0), ar = 0.1), n = 10)
a
str(a)
as.numeric(a)
X = matrix(
rep(as.numeric((arima.sim(list(c(1,0,0), ar = auto.cor), n = n.obs)), n.obs)),
ncol = n.pars)
n.pars = 10 # no. covariates
n.obs = 100 # no. obs
auto.cor = 0.1 # collinearity
X = matrix(
rep(as.numeric((arima.sim(list(c(1,0,0), ar = auto.cor), n = n.obs)), n.obs)),
ncol = n.pars)
X
X = matrix(
rep(as.numeric((arima.sim(list(c(1,0,0), ar = auto.cor), n = n.obs)), n.pars)),
ncol = n.pars)
as.numeric((arima.sim(list(c(1,0,0), ar = auto.cor), n = n.obs)
)
)
gen.one.obs = function(o){
as.numeric(
arima.sim(
list(c(1,0,0), ar = auto.cor),
n = n.pars
)
)
}
gen.one.obs()
rep(gen.obs.obs(), 2)
rep(gen.one.obs(), 2)
create.design.matrix = function(o){
data = gen.all.obs()
matrix(data, ncol = n.pars)
}
create.design.matrix()
gen.all.obs = function(o){
rep(gen.one.obs(), n.obs)
}
create.design.matrix = function(o){
data = gen.all.obs()
matrix(data, ncol = n.pars)
}
create.design.matrix()
a = 1:9
matrix(a, ncol = 3)
help(matrix)
create.design.matrix = function(o){
data = gen.all.obs()
matrix(data, ncol = n.pars, byrow = T)
}
matrix(a, ncol = 3, byrow = T)
beta = c(2, 3, rep(0, n.pars - 8))
beta = c(2, 3, rep(0, n.pars - 2))
y = X %*% beta
a
a += 1
help(rnorm)
noise = rnorm(n.obs, sd = sqrt(sigma2))
sigma2 = 1 # error variance
noise = rnorm(n.obs, sd = sqrt(sigma2))
y = X %*% beta + noise
X
gen.all.obs()
help(matrix)
create.design.matrix = function(o){
data = gen.all.obs()
matrix(data, ncol = n.pars, nrow = n.obs, byrow = T)
}
beta = c(2, 3, rep(0, n.pars - 2))
X = create.design.matrix()
noise = rnorm(n.obs, sd = sqrt(sigma2))
y = X %*% beta + noise
y
noise
gen.everything(beta){
X = create.design.matrix()
noise = rnorm(n.obs, sd = sqrt(sigma2))
y = X %*% beta + noise
return(list(X = X, y = y))
}
help(list)
gen.everything(beta){
X = create.design.matrix()
noise = rnorm(n.obs, sd = sqrt(sigma2))
y = X %*% beta + noise
return list(X = X, y = y)
}
gen.everything(beta){
X = create.design.matrix()
noise = rnorm(n.obs, sd = sqrt(sigma2))
y = X %*% beta + noise
list(X = X, y = y)
}
gen.everything = function(beta){
X = create.design.matrix()
noise = rnorm(n.obs, sd = sqrt(sigma2))
y = X %*% beta + noise
return(list(X = X, y = y))
}
gen.everything()
gen.everything(beta)
gen.everything(beta)
gen.everything(beta)
gen.everything(beta)
source("generate_data.R")
source("./generate_data.R")
# need to switch to the directory first
source("./generate_data.R")
# need to switch to the directory first
source("./generate_data.R")
setwd("~/Dropbox/reading2/simulations/sim_r2")
# need to switch to the directory first
source("./generate_data.R")
dirname(parent.frame(2)$ofile)
setwd(getSrcDirectory()[1])
numeric(3)
change.things = function(pars){par.a = 1}
change.things = function(pars){par$a = 1}
p = list(a = 0, b = 1)
change.things(p)
p
p$a
change.things = function(pars){par$a = 1; return(0)}
change.things(p)
change.things = function(pars){pars$a = 1; return(0)}
change.things(p)
p
p
?setRefClass
ls
objects()
p
p
change.things = function(o) p$a = 1
chagne.things
chagne.things()
chagnge.things()
change.things()
p
p
n.pars = 1 # no. covariates
data = gen.everything()
beta = c(2, 3, rep(0, n.pars - 2)) # true beta
n.pars = 1 # no. covariates
n.obs = 100 # no. obs
auto.cor = 0.1 # collinearity
sigma2 = 1 # error variance
beta = c(2, 3, rep(0, n.pars - 2)) # true beta
n.pars
n.pars = 4 # no. covariates
n.obs = 100 # no. obs
auto.cor = 0.1 # collinearity
sigma2 = 1 # error variance
beta = c(2, 3, rep(0, n.pars - 2)) # true beta
create.design.matrix()
help(sapply)
# generate all observations
gen.all.obs = function(o){
sapply(1:n.obs, gen.one.obs())
}
create.design.matrix()
# generate all observations
gen.all.obs = function(o){
sapply(1:n.obs, gen.one.obs)
}
create.design.matrix()
sapply(1:n.obs, gen.one.obs)
# arrange all observations
create.design.matrix = function(o){
t(gen.all.obs())
}
create.design.matrix()
a = create.design.matrix()
cor(a[,1], a[,2])
cor(a[,1], a[,2])
cor(a[,1], a[,2])
cor(a[,1], a[,2])
a = create.design.matrix()
cor(a[,1], a[,2])
a = create.design.matrix()
cor(a[,1], a[,2])
n.obs = 1000 # no. obs
a = create.design.matrix()
cor(a[,1], a[,2])
a = create.design.matrix()
cor(a[,1], a[,2])
n.obs = 10000 # no. obs
cor(a[,1], a[,2])
a = create.design.matrix()
cor(a[,1], a[,2])
a = create.design.matrix()
cor(a[,1], a[,2])
